// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  addresses     Address[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Decimal       @db.Decimal(10, 2)
  stock         Int
  images        String[]
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reviews       Review[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Category {
  id            String         @id @default(cuid())
  name          String        @unique
  description   String?
  image         String?
  products      Product[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Order {
  id            String         @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  status        OrderStatus   @default(PENDING)
  total         Decimal       @db.Decimal(10, 2)
  items         OrderItem[]
  addressId     String
  address       Address       @relation(fields: [addressId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
}

model OrderItem {
  id            String         @id @default(cuid())
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
  productId     String
  product       Product       @relation(fields: [productId], references: [id])
  quantity      Int
  price         Decimal       @db.Decimal(10, 2)
}

model Cart {
  id            String         @id @default(cuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  items         CartItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CartItem {
  id            String         @id @default(cuid())
  cartId        String
  cart          Cart          @relation(fields: [cartId], references: [id])
  productId     String
  product       Product       @relation(fields: [productId], references: [id])
  quantity      Int
}

model Review {
  id            String         @id @default(cuid())
  rating        Int
  comment       String?
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  productId     String
  product       Product       @relation(fields: [productId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Address {
  id            String         @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  street        String
  city          String
  state         String
  postalCode    String
  country       String        @default("India")
  isDefault     Boolean       @default(false)
  orders        Order[]
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
