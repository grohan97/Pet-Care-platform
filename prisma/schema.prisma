// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  addresses     Address[]
  pets          Pet[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  stockQuantity Int
  imageUrl      String
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reviews       Review[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Category {
  id            String         @id @default(cuid())
  name          String        @unique
  description   String?
  image         String?
  products      Product[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Order {
  id            String         @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  status        OrderStatus   @default(PENDING)
  total         Float
  items         OrderItem[]
  addressId     String
  address       Address       @relation(fields: [addressId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
}

model OrderItem {
  id            String         @id @default(cuid())
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
  productId     String
  product       Product       @relation(fields: [productId], references: [id])
  quantity      Int
  price         Float
}

model Cart {
  id            String         @id @default(cuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  items         CartItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CartItem {
  id            String         @id @default(cuid())
  cartId        String
  cart          Cart          @relation(fields: [cartId], references: [id])
  productId     String
  product       Product       @relation(fields: [productId], references: [id])
  quantity      Int
}

model Review {
  id                String          @id @default(cuid())
  rating            Int
  comment           String?
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  productId         String?
  product           Product?        @relation(fields: [productId], references: [id])
  serviceProviderId String?
  serviceProvider   ServiceProvider? @relation(fields: [serviceProviderId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Address {
  id            String         @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  street        String
  city          String
  state         String
  postalCode    String
  country       String        @default("India")
  isDefault     Boolean       @default(false)
  orders        Order[]
}

model Pet {
  id              String    @id @default(cuid())
  name            String
  type            String    // dog, cat, bird, etc.
  breed           String?
  dateOfBirth     DateTime?
  weight          Float?
  userId          String    // Reference to the owner
  user            User      @relation(fields: [userId], references: [id])
  vaccinations    Vaccination[]
  healthRecords   HealthRecord[]
  dietaryNotes    String?
  groomingRecords GroomingRecord[]
  appointments    Appointment[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Vaccination {
  id          String    @id @default(cuid())
  petId       String
  pet         Pet       @relation(fields: [petId], references: [id])
  name        String
  date        DateTime
  nextDueDate DateTime?
  veterinary  String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model HealthRecord {
  id          String    @id @default(cuid())
  petId       String
  pet         Pet       @relation(fields: [petId], references: [id])
  type        String    // checkup, treatment, surgery, etc.
  date        DateTime
  description String
  veterinary  String
  diagnosis   String?
  prescription String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model GroomingRecord {
  id          String    @id @default(cuid())
  petId       String
  pet         Pet       @relation(fields: [petId], references: [id])
  date        DateTime
  serviceType String    // bath, haircut, nail trimming, etc.
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ServiceProvider {
  id          String    @id @default(cuid())
  name        String
  type        String    // veterinary, groomer, walker, boarder
  description String
  address     String
  phone       String
  email       String    @unique
  services    Service[]
  appointments Appointment[]
  rating      Float?
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id               String    @id @default(cuid())
  name             String
  description      String
  price            Float
  duration         Int       // in minutes
  serviceProviderId String
  serviceProvider  ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  type             String    // veterinary, grooming, boarding, walking
  appointments     Appointment[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Appointment {
  id               String    @id @default(cuid())
  petId            String
  pet              Pet       @relation(fields: [petId], references: [id])
  serviceId        String
  service          Service   @relation(fields: [serviceId], references: [id])
  serviceProviderId String
  serviceProvider  ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  date             DateTime
  status           String    // scheduled, completed, cancelled
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
